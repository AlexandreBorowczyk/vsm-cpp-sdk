package ugcs.vsm.proto;

option java_package = "com.ugcs.ucs.vsm.proto";
option java_outer_classname = "VsmMessagesProto";

import "ucs_vsm_defs.proto";

// VSM-UCS Transport protocol wire format definition
//
// Frame wire format:
// <length><data>
// length   Size of data in bytes encoded as LEB128 (https://en.wikipedia.org/wiki/LEB128)
// data     Message data of type Vsm_message
//
// Having only one message type allows us to avoid sending message ID on the wire with each message.

// Generic message
message Vsm_message {

    // Uniquely identifies the connected device. Exception is register_peer payload when this field is zero.
    // This id is generated when Register_device message is created.
    // It defines the context (session) for all subsequent communications with the device (in both directions). 
    required uint32 device_id = 1;

    // Unique message id. This will be put into response if response is required. Can be omitted if response is not required.
    // Request message_id if this message is a response to particular request.
    optional uint32 message_id = 2;

    // Indicates that peer will wait for response on this command.
    optional bool response_required = 3;

    // Used to detect duplicate connections between ucs and vsm.
    // This must be the first message sent from ucs and VSM on new connection.
    // In this case device_id==0 which means this message is for peer application not device.
    // No device specific payloads can be present if device_id==0.
    optional Register_peer register_peer = 4;

    optional Register_device register_device = 5;

    optional Unregister_device unregister_device = 6;

    repeated Device_command device_commands = 7;

    // If this field is present then this is a response to previously sent request.
    // If message_id is present, too then it contains the message_id from the corresponding request.
    optional Device_response device_response = 8;

    // Device can send this message any time it wants to report some info to ucs.
    optional Device_status device_status = 9;
}

// Used to tell the unique application ID to detect concurrent connections and for version compatibility.
message Register_peer {

    required uint32 peer_id = 1;

    // Type and version of peer. 
    // Application can use this information to detect the level of compatibility.
    // It can decide to continue to use, close or ignore the connection.
    optional Peer_type peer_type = 2;
    optional uint32 version_minor = 3;
    optional uint32 version_major = 4;
    optional string version_build = 5;

    // Peer name
    optional string name = 6;
}

// Register various kinds of devices.
message Register_device {

    // begin_of_epoch is used to optimize space used for timestamp in each telemetry field.
    // the absolute time is calculated as begin_of_epoch + timestamp.
    // Milliseconds since 1970-01-01 00:00:00 UTC.
    // This value is vehicle registration time. Thus UCS
    // could show a warning about out of sync time between ucs and VSM if the value
    // differs from current time a lot.
    required uint64 begin_of_epoch = 1;
    
    // Vehicle, Adsb receiver, RTK base station, etc...
    required Device_type type = 2;
    
    // User definable key-value pairs
    repeated Property_field properties = 3;

    // flight controller, gimbal, cameras, etc...
    repeated Register_subsystem subsystems = 4;
}

// Invalidates the specified Vsm_message.device_id
// Presence of this payload means that device has disconnected and all its state should be dropped.
// Use this to drop any context established via Register_device message.
// Important: Automatically unregisters all subsystems registered under this device.
message Unregister_device {
}

message Device_status {

    // place to put raw data received from vehicle or debug messages from VSM.
    repeated string status_messages = 1;

    // Device telemetry
    repeated Telemetry_field telemetry_fields = 2;

    // current command availability
    repeated Command_availability command_availability = 3;
}

message Device_response {

    // Response code. on previously sent request.
    required Status_code code = 1;

    // array of values to create localized error string for given Status_code.
    repeated string arguments = 2;

    // place to put raw data received from vehicle or debug messages from VSM.
    optional string status = 3;

    // VSM generated mission ID which is later reported in telemetry as current_mission_id
    // It is used to tell the server the validity of mission_command_map.
    // Server should drop the mission map as soon as VSM reports different current_mission_id.
    // Server must ignore the reported curent_command values until it gets a valid current_mission_id.
    optional uint32 mission_id = 4;

    // Command mapping between mission uploaded to the vehicle and mission received by server.
    // Server must keep this map tied to specific vehicle instance until vehicle
    // explicitly reports current_mission_id different from this one.
    // Server should use this map to map reported current_command only while VSM reports the same current_mission_id.
    // I.e. server should keep the map but not use it if VSM reports current_mission_id==N/A.
    repeated Mission_command_map mission_command_map = 5;
    
    // Used to report progress of a pending command.
    // Peer can send this any number of times before sending final response.
    // Range: [0..1]
    optional float progress = 6;
}

message Mission_command_map {

    // Current command ID reported by the VSM as current_command telemetry field.
    required uint32 vehicle_command_id = 1;

    // Corresponding command index in mission_upload sub_commands array. 0-based.
    required uint32 mission_command_idx = 2;
}

message Device_command {

    // Command id (Must be from previously registered commands)
    required uint32 command_id = 1;

    // list of command parameters.
    repeated Parameter_field parameters = 2;

    // List of subcommands (E.g. mission items)
    repeated Device_command sub_commands = 3;
}

message Telemetry_field {

    // Session wide unique field id defined via Register_field message
    required uint32 field_id = 1;

    // Time in ms this value was gathered since begin_of_epoch which set in Register_device message.
    // NOTE: this value is calculated using system_clock and must not be assumed monotonic.
    // It can have negative values if system_clock is turned back while VSM is running.
    required sint64 ms_since_epoch = 2;

    required Field_value value = 3;
}

message Parameter_field {

    // Unique field id defined via Register_field message
    required uint32 field_id = 1;

    required Field_value value = 2;
}

message Property_field {

    // parameter name used to send some value without registering first.
    required string name = 1;

    required Field_value value = 2;

    // Specifies the value type.
    required Field_semantic semantic = 3;
}

message Field_value {

    // If this is present field value is one of supported "meta" values.
    optional Meta_value meta_value = 1;

    // value holders for various regular field types.
    optional sint64 int_value = 2;

    optional float float_value = 3;

    optional double double_value = 4;

    optional string string_value = 5;

    optional bool bool_value = 6;

    optional List_value list_value = 7;
}

message List_value {

    repeated Field_value values = 1;
}


// VSM can enable/disable specific command at runtime
message Command_availability {

    // command_id
    required uint32 id = 1;

    // capability is supported by vehicle
    optional bool is_available = 2;

    // capability can be used on the vehicle, currently
    optional bool is_enabled = 3;
}

// VSM must send this message before it can be used or Command_availability can be sent.
message Register_command {

    // Name of command
    required string name = 1;

    // Session specific id for name.
    required uint32 id = 2;

    // parameters supported by command.
    repeated Register_field parameters = 3;
    
    // this command is available as mission item
    optional bool available_in_mission = 4;
}

message Register_subsystem {

    // Type of subsystem
    required Subsystem_type type = 1;

    // Subsystem properties
    repeated Property_field properties = 2;

    // Telemetry fields supported by subsystem
    repeated Register_field telemetry_fields = 3;

    // Commands supported by subsystem
    repeated Register_command commands = 4;
}

// Used to send definitions of vehicle supported parameters and telemetry fields to UCS
message Register_field {

    // Name of telemetry field.
    required string name = 1;

    // Session specific field id.
    required uint32 field_id = 2;

    // Required for any defined field. Specifies the value type.
    required Field_semantic semantic = 3;

    // Default value to show in client.
    // If min_value == max_value it means that parameter is not user changeable and should be set to default_value.
    optional Field_value default_value = 4;

    // Minimum value of field
    optional Field_value min_value = 5;

    // Maximum value of field
    optional Field_value max_value = 6;

    // User defined enumeration when field_semantic == FIELD_SEMANTIC_ENUM.
    repeated Field_enumeration enumeration = 7;
}

// Used to send definitions of user-defined enumerations used in telemetry and parameters.
message Field_enumeration {

    // Value of enum field
    // The value of id must be constant for the field it is defined for.
    // I.e. it cannot be session specific. These values are saved directly in telemetry database.
    required int32 id = 1;

    // Description of the value
    required string description = 2;
}
