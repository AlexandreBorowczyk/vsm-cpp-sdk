// Copyright (c) 2014, Smart Projects Holdings Ltd
// All rights reserved.
// See LICENSE file for license details.

/*
 * platform_sockets.h
 *
 * Defines platform specific parts of socket implementation.
 */

#ifndef PLATFORM_SOCKETS_H_
#define PLATFORM_SOCKETS_H_

// Windows specific headers for socket stuff
#ifdef _WIN32
#include <winsock2.h>
#include <ws2tcpip.h> // for socklen_t
/* Some weird code can define these macros in Windows headers. */
#ifdef ERROR
#undef ERROR
#endif
#ifdef interface
#undef interface
#endif
#ifdef RELATIVE
#undef RELATIVE
#endif
#ifdef ABSOLUTE
#undef ABSOLUTE
#endif
#endif


// Linux specific headers for socket stuff
#ifdef __unix__
#include <sys/socket.h>
#include <arpa/inet.h>  // inet_ntoa
#include <netdb.h>      // addrinfo

#define INVALID_SOCKET (-1)
#define SOCKET_ERROR (-1)

#endif

namespace platform
{

// Windows specific socket handle
#ifdef _WIN32
typedef SOCKET Socket_handle; /* Win */
#endif

// Linux specific socket handle
#ifdef __unix__
typedef int Socket_handle;
#endif

// To avoid SIGPIPE generation on send()
#ifdef MSG_NOSIGNAL
const int SEND_FLAGS = MSG_NOSIGNAL;
#else
#ifndef _WIN32
#warning "SIGPIPE can get generated by send/write calls"
#endif
// Windows does not have it and does not need it
const int SEND_FLAGS = 0;
#endif

// These two calls are for WSAStartup and friends. nop in linux world.
void
Init_sockets();

void
Done_sockets();

int
Create_socketpair(Socket_handle&, Socket_handle&);

int
Close_socket(Socket_handle);

bool
Is_last_operation_pending();

int
Make_nonblocking(Socket_handle);

int
Prepare_for_listen(Socket_handle);

}// namespace platform

#endif /* PLATFORM_SOCKETS_H_ */
